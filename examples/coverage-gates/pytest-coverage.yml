# Python Test Coverage Gate with pytest
# Fails PR if coverage drops below threshold

name: Python Coverage Gate

on:
  pull_request:
    branches: [ main, master ]
  push:
    branches: [ main, master ]

permissions:
  contents: read

jobs:
  coverage:
    name: Test Coverage Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    permissions:
      contents: read
      pull-requests: write  # To comment on PRs
      checks: write         # To create check runs
    
    steps:
    - name: Checkout code
      uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332  # v4.1.7
      with:
        fetch-depth: 0
    
    - name: Setup Python
      uses: actions/setup-python@f677139bbe7f9c59b41e40162b753c062f5d49a3  # v5.2.0
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        pip install pytest pytest-cov pytest-html
        pip install -r requirements.txt
    
    - name: Run tests with coverage
      run: |
        pytest \
          --cov=. \
          --cov-report=term-missing \
          --cov-report=html:htmlcov \
          --cov-report=json:coverage.json \
          --cov-report=xml:coverage.xml \
          --cov-fail-under=80 \
          --junitxml=junit.xml
    
    # Generate coverage badge
    - name: Generate Coverage Badge
      if: always()
      run: |
        COVERAGE=$(python -c "import json; print(json.load(open('coverage.json'))['totals']['percent_covered_display'])")
        echo "Coverage: $COVERAGE%"
        
        # Determine badge color
        if (( $(echo "$COVERAGE >= 90" | bc -l) )); then
          COLOR="brightgreen"
        elif (( $(echo "$COVERAGE >= 80" | bc -l) )); then
          COLOR="green"
        elif (( $(echo "$COVERAGE >= 70" | bc -l) )); then
          COLOR="yellow"
        elif (( $(echo "$COVERAGE >= 60" | bc -l) )); then
          COLOR="orange"
        else
          COLOR="red"
        fi
        
        echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV
        echo "BADGE_COLOR=$COLOR" >> $GITHUB_ENV
    
    # Upload coverage reports
    - name: Upload Coverage HTML
      if: always()
      uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874  # v4.4.0
      with:
        name: coverage-report
        path: htmlcov/
        retention-days: 30
    
    # Comment on PR with coverage
    - name: Comment Coverage on PR
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea  # v7.0.1
      with:
        script: |
          const fs = require('fs');
          const coverage = JSON.parse(fs.readFileSync('coverage.json', 'utf8'));
          
          const total = coverage.totals.percent_covered_display;
          const statements = coverage.totals.covered_lines;
          const totalStatements = coverage.totals.num_statements;
          const missing = coverage.totals.missing_lines;
          
          // Determine status emoji
          const emoji = total >= 90 ? 'üü¢' : total >= 80 ? 'üü°' : 'üî¥';
          
          const body = `## ${emoji} Test Coverage Report
          
          **Overall Coverage**: ${total}%
          
          | Metric | Value |
          |--------|-------|
          | **Statements Covered** | ${statements} / ${totalStatements} |
          | **Missing** | ${missing} |
          | **Threshold** | 80% |
          | **Status** | ${total >= 80 ? '‚úÖ PASS' : '‚ùå FAIL'} |
          
          ### Coverage by File
          
          | File | Coverage |
          |------|----------|
          ${Object.entries(coverage.files)
            .sort((a, b) => a[1].summary.percent_covered - b[1].summary.percent_covered)
            .slice(0, 10)
            .map(([file, data]) => {
              const percent = data.summary.percent_covered_display;
              const icon = percent >= 80 ? '‚úÖ' : percent >= 60 ? '‚ö†Ô∏è' : '‚ùå';
              return `| ${icon} \`${file}\` | ${percent}% |`;
            })
            .join('\n')}
          
          ${total < 80 ? '‚ö†Ô∏è **Coverage is below threshold (80%). Please add tests for uncovered code.**' : ''}
          
          [View Full Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.name,
            body: body
          });
    
    # Fail if coverage is below threshold
    - name: Check Coverage Threshold
      if: always()
      run: |
        COVERAGE=$(python -c "import json; print(json.load(open('coverage.json'))['totals']['percent_covered'])")
        THRESHOLD=80
        
        echo "Coverage: $COVERAGE%"
        echo "Threshold: $THRESHOLD%"
        
        if (( $(echo "$COVERAGE < $THRESHOLD" | bc -l) )); then
          echo "‚ùå Coverage ($COVERAGE%) is below threshold ($THRESHOLD%)"
          echo ""
          echo "Missing coverage in:"
          python -c "
import json
coverage = json.load(open('coverage.json'))
for file, data in sorted(coverage['files'].items(), key=lambda x: x[1]['summary']['percent_covered']):
    percent = data['summary']['percent_covered_display']
    if float(percent) < $THRESHOLD:
        print(f'  - {file}: {percent}%')
"
          exit 1
        else
          echo "‚úÖ Coverage ($COVERAGE%) meets threshold ($THRESHOLD%)"
        fi
    
    - name: Post Summary
      if: always()
      run: |
        echo "## üìä Test Coverage Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Coverage**: ${{ env.COVERAGE }}%" >> $GITHUB_STEP_SUMMARY
        echo "**Threshold**: 80%" >> $GITHUB_STEP_SUMMARY
        echo "**Status**: $([ $(echo "${{ env.COVERAGE }} >= 80" | bc -l) -eq 1 ] && echo "‚úÖ PASS" || echo "‚ùå FAIL")" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "[View Detailed Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY

# Configuration Notes:
# 1. Adjust --cov-fail-under=80 to your desired threshold
# 2. Modify THRESHOLD variable in "Check Coverage Threshold" step
# 3. Customize coverage report formats as needed
# 4. Add coverage badge to README using shields.io or similar

