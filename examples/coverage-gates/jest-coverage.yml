# Node.js/TypeScript Test Coverage Gate with Jest
# Fails PR if coverage drops below threshold

name: Jest Coverage Gate

on:
  pull_request:
    branches: [ main, master ]
  push:
    branches: [ main, master ]

permissions:
  contents: read

jobs:
  coverage:
    name: Test Coverage Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    permissions:
      contents: read
      pull-requests: write
      checks: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332  # v4.1.7
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@1e60f620b9541d16bece96c5465dc8ee9832be0b  # v4.0.3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests with coverage
      run: |
        npm test -- --coverage --coverageReporters=text --coverageReporters=html --coverageReporters=json --coverageReporters=lcov
    
    # Parse coverage and set environment variables
    - name: Parse Coverage
      if: always()
      run: |
        COVERAGE=$(node -p "JSON.parse(require('fs').readFileSync('coverage/coverage-summary.json')).total.lines.pct")
        echo "Coverage: $COVERAGE%"
        echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV
        
        # Determine badge color
        if (( $(echo "$COVERAGE >= 90" | bc -l) )); then
          COLOR="brightgreen"
        elif (( $(echo "$COVERAGE >= 80" | bc -l) )); then
          COLOR="green"
        elif (( $(echo "$COVERAGE >= 70" | bc -l) )); then
          COLOR="yellow"
        else
          COLOR="red"
        fi
        echo "BADGE_COLOR=$COLOR" >> $GITHUB_ENV
    
    # Upload coverage reports
    - name: Upload Coverage HTML
      if: always()
      uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874  # v4.4.0
      with:
        name: coverage-report
        path: coverage/
        retention-days: 30
    
    # Comment on PR with coverage
    - name: Comment Coverage on PR
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea  # v7.0.1
      with:
        script: |
          const fs = require('fs');
          const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
          
          const total = coverage.total;
          const emoji = total.lines.pct >= 90 ? 'üü¢' : total.lines.pct >= 80 ? 'üü°' : 'üî¥';
          
          const body = `## ${emoji} Test Coverage Report
          
          **Overall Coverage**: ${total.lines.pct}%
          
          | Metric | Coverage | Covered / Total |
          |--------|----------|-----------------|
          | **Lines** | ${total.lines.pct}% | ${total.lines.covered} / ${total.lines.total} |
          | **Statements** | ${total.statements.pct}% | ${total.statements.covered} / ${total.statements.total} |
          | **Functions** | ${total.functions.pct}% | ${total.functions.covered} / ${total.functions.total} |
          | **Branches** | ${total.branches.pct}% | ${total.branches.covered} / ${total.branches.total} |
          
          **Threshold**: 80%  
          **Status**: ${total.lines.pct >= 80 ? '‚úÖ PASS' : '‚ùå FAIL'}
          
          ### Coverage by File (Lowest 10)
          
          | File | Lines | Statements | Functions | Branches |
          |------|-------|------------|-----------|----------|
          ${Object.entries(coverage)
            .filter(([key]) => key !== 'total')
            .sort((a, b) => a[1].lines.pct - b[1].lines.pct)
            .slice(0, 10)
            .map(([file, data]) => {
              const icon = data.lines.pct >= 80 ? '‚úÖ' : data.lines.pct >= 60 ? '‚ö†Ô∏è' : '‚ùå';
              return `| ${icon} \`${file.replace(process.cwd() + '/', '')}\` | ${data.lines.pct}% | ${data.statements.pct}% | ${data.functions.pct}% | ${data.branches.pct}% |`;
            })
            .join('\n')}
          
          ${total.lines.pct < 80 ? '‚ö†Ô∏è **Coverage is below threshold (80%). Please add tests for uncovered code.**' : ''}
          
          [View Full Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.name,
            body: body
          });
    
    # Fail if coverage is below threshold
    - name: Check Coverage Threshold
      if: always()
      run: |
        COVERAGE=$(node -p "JSON.parse(require('fs').readFileSync('coverage/coverage-summary.json')).total.lines.pct")
        THRESHOLD=80
        
        echo "Coverage: $COVERAGE%"
        echo "Threshold: $THRESHOLD%"
        
        if (( $(echo "$COVERAGE < $THRESHOLD" | bc -l) )); then
          echo "‚ùå Coverage ($COVERAGE%) is below threshold ($THRESHOLD%)"
          echo ""
          echo "Files with low coverage:"
          node -e "
const coverage = require('./coverage/coverage-summary.json');
Object.entries(coverage)
  .filter(([key]) => key !== 'total')
  .filter(([_, data]) => data.lines.pct < $THRESHOLD)
  .sort((a, b) => a[1].lines.pct - b[1].lines.pct)
  .forEach(([file, data]) => {
    console.log(\`  - \${file}: \${data.lines.pct}%\`);
  });
"
          exit 1
        else
          echo "‚úÖ Coverage ($COVERAGE%) meets threshold ($THRESHOLD%)"
        fi
    
    - name: Post Summary
      if: always()
      run: |
        echo "## üìä Test Coverage Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Coverage**: ${{ env.COVERAGE }}%" >> $GITHUB_STEP_SUMMARY
        echo "**Threshold**: 80%" >> $GITHUB_STEP_SUMMARY
        echo "**Status**: $([ $(echo "${{ env.COVERAGE }} >= 80" | bc -l) -eq 1 ] && echo "‚úÖ PASS" || echo "‚ùå FAIL")" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "[View Detailed Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY

# Jest Configuration (jest.config.js):
#
# module.exports = {
#   collectCoverage: true,
#   coverageDirectory: 'coverage',
#   coverageReporters: ['text', 'html', 'json', 'lcov'],
#   coverageThreshold: {
#     global: {
#       lines: 80,
#       statements: 80,
#       functions: 80,
#       branches: 80
#     }
#   },
#   collectCoverageFrom: [
#     'src/**/*.{js,jsx,ts,tsx}',
#     '!src/**/*.test.{js,jsx,ts,tsx}',
#     '!src/**/*.spec.{js,jsx,ts,tsx}',
#     '!src/**/__tests__/**'
#   ]
# };

