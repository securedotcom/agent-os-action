# Flake8 Configuration for Performance and Complexity Linting
# Install: pip install flake8 flake8-complexity flake8-bugbear flake8-simplify
# Run: flake8 --config=.flake8

[flake8]
# Maximum line length
max-line-length = 120

# Maximum cyclomatic complexity
max-complexity = 10

# Maximum cognitive complexity (requires flake8-cognitive-complexity)
max-cognitive-complexity = 15

# Enable performance and complexity plugins
select = 
    E,    # pycodestyle errors
    W,    # pycodestyle warnings
    F,    # pyflakes
    C90,  # mccabe complexity
    B,    # flake8-bugbear (performance and correctness)
    SIM,  # flake8-simplify (simplification suggestions)
    CCR,  # flake8-cognitive-complexity

# Ignore specific rules
ignore = 
    E203,  # whitespace before ':'
    E501,  # line too long (handled by max-line-length)
    W503,  # line break before binary operator

# Exclude directories
exclude = 
    .git,
    __pycache__,
    .venv,
    venv,
    build,
    dist,
    *.egg-info,
    .tox,
    node_modules

# Per-file ignores
per-file-ignores = 
    __init__.py:F401  # Allow unused imports in __init__.py

# Show source code for each error
show-source = True

# Show pep8 name for each error
show-pep8 = True

# Count errors
count = True

# Performance-specific checks (flake8-bugbear)
# B001: Do not use bare `except:`
# B002: Python does not support the unary prefix increment
# B003: Assigning to `os.environ` doesn't clear the environment
# B004: Using `hasattr(x, '__call__')` to test if x is callable
# B005: Using .strip() with multi-character strings
# B006: Do not use mutable data structures for argument defaults
# B007: Loop control variable not used within the loop body
# B008: Do not perform function calls in argument defaults
# B009: Do not call getattr with a constant attribute value
# B010: Do not call setattr with a constant attribute value

# Simplification checks (flake8-simplify)
# SIM101: Multiple isinstance calls
# SIM102: Collapsible if statements
# SIM103: Return condition directly
# SIM105: Use contextlib.suppress() instead of try-except-pass
# SIM106: Handle error-cases first (guard clauses)
# SIM108: Use ternary operator
# SIM110: Use any() instead of for loop
# SIM111: Use all() instead of for loop
# SIM112: Use CAPITAL_ENVIRONMENT_VARIABLES
# SIM113: Use enumerate instead of manual counter
# SIM114: Combine conditions via logical or
# SIM115: Use context handler for opening files
# SIM116: Use dict instead of if-elif-else
# SIM117: Use single with statement
# SIM118: Use key in dict instead of dict.keys()

