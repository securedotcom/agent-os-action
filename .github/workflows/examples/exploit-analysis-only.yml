name: Exploit Analysis (No Test Generation)

on:
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM

  workflow_dispatch:

jobs:
  exploit-analysis:
    name: Daily Exploit Chain Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      issues: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Exploit Analysis
        id: analysis
        uses: securedotcom/agent-os-action@v2.2.0
        with:
          # AI Provider Configuration
          ai-provider: anthropic
          anthropic-api-key: ${{ secrets.ANTHROPIC_API_KEY }}

          # Enable exploit analysis, disable test generation
          multi-agent-mode: 'sequential'
          enable-exploit-analysis: 'true'
          generate-security-tests: 'false'

          # Analysis only, don't fail
          fail-on-blockers: 'false'
          fail-on: ''

          upload-reports: 'true'

          # Budget for daily analysis
          max-cost-usd: '1.50'

      - name: Upload SARIF to Security Tab
        if: always() && steps.analysis.outputs.sarif-path != ''
        continue-on-error: true
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ steps.analysis.outputs.sarif-path }}
          category: agent-os-daily-exploit-analysis

      - name: Display Exploit Analysis Results
        if: always()
        run: |
          echo "## Daily Exploit Chain Analysis"
          echo ""
          echo "### Exploitability Classification"
          echo "- Trivial: ${{ steps.analysis.outputs.exploitability-trivial }}"
          echo "- Moderate: ${{ steps.analysis.outputs.exploitability-moderate }}"
          echo "- Complex: ${{ steps.analysis.outputs.exploitability-complex }}"
          echo ""
          echo "### Exploit Chains"
          echo "- Chains Found: ${{ steps.analysis.outputs.exploit-chains-found }}"
          echo ""
          echo "### Overall Security"
          echo "- Critical/High Issues: ${{ steps.analysis.outputs.blockers-found }}"
          echo "- Medium/Low Issues: ${{ steps.analysis.outputs.suggestions-found }}"
          echo ""
          echo "### Analysis Cost"
          echo "- Cost: \$${{ steps.analysis.outputs.cost-estimate }}"
          echo "- Duration: ${{ steps.analysis.outputs.duration-seconds }}s"
          echo "- Files: ${{ steps.analysis.outputs.files-analyzed }}"

      - name: Create Issue on Trivial Exploitability
        if: steps.analysis.outputs.exploitability-trivial > 0
        uses: actions/github-script@v7
        with:
          script: |
            const trivial = '${{ steps.analysis.outputs.exploitability-trivial }}';
            const moderate = '${{ steps.analysis.outputs.exploitability-moderate }}';
            const chains = '${{ steps.analysis.outputs.exploit-chains-found }}';
            const blockers = '${{ steps.analysis.outputs.blockers-found }}';

            // Check if an issue already exists for today
            const today = new Date().toISOString().split('T')[0];
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'security,daily-exploit-analysis'
            });

            const existingIssue = issues.find(issue =>
              issue.title.includes('Daily Security Alert') && issue.created_at.startsWith(today)
            );

            const body = `## Automated Daily Security Alert\n\n` +
                        `**Analysis Date**: ${new Date().toISOString()}\n` +
                        `**Repository**: ${context.repo.owner}/${context.repo.repo}\n` +
                        `**Commit**: ${context.sha}\n\n` +
                        `### Exploitability Summary\n\n` +
                        `| Classification | Count | Timeline |\n` +
                        `|----------------|-------|----------|\n` +
                        `| ⚠️ Trivial | ${trivial} | Fix within 24-48 hours |\n` +
                        `| 🟨 Moderate | ${moderate} | Fix within 1 week |\n\n` +
                        `**Exploit Chains Found**: ${chains}\n` +
                        `**Total Security Issues**: ${blockers}\n\n` +
                        `### Risk Assessment\n\n`;

            let riskLevel = 'Low';
            let riskEmoji = '✅';
            let timeline = 'No immediate action required';

            if (parseInt(trivial) > 0) {
              riskLevel = 'Critical';
              riskEmoji = '🚨';
              timeline = '**IMMEDIATE ACTION REQUIRED**: Fix within 24-48 hours';
            } else if (parseInt(moderate) > 0) {
              riskLevel = 'High';
              riskEmoji = '⚠️';
              timeline = '**Action Required**: Fix within 1 week';
            } else if (parseInt(chains) > 0) {
              riskLevel = 'Moderate';
              riskEmoji = '🟨';
              timeline = 'Review and prioritize fixes';
            }

            const fullBody = body +
                            `${riskEmoji} **Risk Level**: ${riskLevel}\n\n` +
                            `**Required Timeline**: ${timeline}\n\n` +
                            `### Details\n\n` +
                            `These vulnerabilities can be exploited with varying difficulty:\n\n` +
                            `- **Trivial**: Can be exploited in <10 minutes with basic tools\n` +
                            `- **Moderate**: Requires 1-4 hours and some technical knowledge\n\n` +
                            `${parseInt(chains) > 0 ? `**${chains} exploit chain(s)** were identified where multiple vulnerabilities can be combined for greater impact.\n\n` : ''}` +
                            `### Next Steps\n\n` +
                            `1. Review the [Security tab](${context.payload.repository.html_url}/security/code-scanning) for detailed findings\n` +
                            `2. Download the [exploit analysis report](${context.payload.repository.html_url}/actions/runs/${context.runId})\n` +
                            `3. Prioritize fixes based on exploitability classification\n` +
                            `4. Validate fixes with security tests\n\n` +
                            `---\n\n` +
                            `*This issue was automatically created by Agent OS daily exploit analysis*\n` +
                            `*Run ID: ${context.runId}*`;

            if (existingIssue) {
              // Update existing issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssue.number,
                body: `## Updated Analysis Results\n\n${fullBody}`
              });
              console.log(`Updated existing issue #${existingIssue.number}`);
            } else {
              // Create new issue
              const { data: issue } = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `🚨 Daily Security Alert: ${trivial} Trivially Exploitable Vulnerabilities (${today})`,
                body: fullBody,
                labels: ['security', 'daily-exploit-analysis', 'exploit-analysis']
              });
              console.log(`Created new issue #${issue.number}`);
            }

      - name: Upload Analysis Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: daily-exploit-analysis-${{ github.run_id }}
          path: .agent-os/reviews/
          retention-days: 90
