name: Smoke Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

jobs:
  smoke-test:
    name: Smoke Test - ${{ matrix.mode }} - ${{ matrix.provider }}
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    strategy:
      fail-fast: false
      matrix:
        mode: ['single', 'sequential']
        provider: ['anthropic']
        include:
          - mode: 'single'
            cost-limit: '1.0'
            timeout: 10
          - mode: 'sequential'
            cost-limit: '5.0'
            timeout: 15
    
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@5c7944e73c4c2a096b17a9cb74d65b6c2bbafbde  # v2.9.1
        with:
          egress-policy: audit
      
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332  # v4.1.7
      
      - name: Setup Python
        uses: actions/setup-python@f677139bbe7f9c59b41e40162b753c062f5d49a3  # v5.2.0
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Create Test Repository
        run: |
          mkdir -p test-repo/src
          cat > test-repo/src/vulnerable.js << 'EOF'
          // Test file with intentional issues for smoke testing
          const express = require('express');
          const app = express();
          
          // SECURITY: SQL Injection vulnerability
          app.get('/user', (req, res) => {
            const query = `SELECT * FROM users WHERE id = ${req.query.id}`;
            db.execute(query);
          });
          
          // PERFORMANCE: N+1 query problem
          async function getOrders() {
            const orders = await db.orders.findAll();
            for (const order of orders) {
              const customer = await db.customers.findById(order.customerId);
              console.log(customer.name);
            }
          }
          
          // QUALITY: High complexity function
          function processData(data) {
            if (data) {
              if (data.type === 'A') {
                if (data.value > 10) {
                  if (data.status === 'active') {
                    return data.value * 2;
                  } else {
                    return data.value;
                  }
                } else {
                  return 0;
                }
              } else {
                return -1;
              }
            }
            return null;
          }
          
          // TESTING: No tests for critical auth logic
          function authenticate(username, password) {
            // Critical auth logic with no tests
            return username === 'admin' && password === 'secret';
          }
          
          module.exports = { app, getOrders, processData, authenticate };
          EOF
          
          cat > test-repo/package.json << 'EOF'
          {
            "name": "smoke-test-repo",
            "version": "1.0.0",
            "dependencies": {
              "express": "^4.18.0"
            }
          }
          EOF
      
      - name: Run Agent OS Code Review
        id: review
        uses: ./
        with:
          multi-agent-mode: ${{ matrix.mode }}
          anthropic-api-key: ${{ secrets.ANTHROPIC_API_KEY }}
          project-path: './test-repo'
          cost-limit: ${{ matrix.cost-limit }}
          fail-on-blockers: 'false'  # Don't fail smoke test
          upload-reports: 'true'
        continue-on-error: true  # Capture failures for assertion
      
      - name: Verify Outputs Exist
        run: |
          echo "Verifying smoke test outputs..."
          
          # Check that review completed
          if [ "${{ steps.review.outputs.review-completed }}" != "true" ]; then
            echo "❌ Review did not complete"
            exit 1
          fi
          
          # Check that reports were generated
          if [ ! -f "test-repo/.agent-os/reviews/audit-report.md" ]; then
            echo "❌ Main report not found"
            exit 1
          fi
          
          if [ ! -f "test-repo/.agent-os/reviews/results.sarif" ]; then
            echo "❌ SARIF report not found"
            exit 1
          fi
          
          if [ ! -f "test-repo/.agent-os/reviews/results.json" ]; then
            echo "❌ JSON report not found"
            exit 1
          fi
          
          if [ ! -f "test-repo/.agent-os/reviews/metrics.json" ]; then
            echo "❌ Metrics not found"
            exit 1
          fi
          
          # For multi-agent mode, check individual agent reports
          if [ "${{ matrix.mode }}" == "sequential" ]; then
            if [ ! -d "test-repo/.agent-os/reviews/agents" ]; then
              echo "❌ Agent reports directory not found"
              exit 1
            fi
            
            for agent in security performance testing quality; do
              if [ ! -f "test-repo/.agent-os/reviews/agents/${agent}-report.md" ]; then
                echo "❌ ${agent} agent report not found"
                exit 1
              fi
            done
          fi
          
          echo "✅ All expected outputs exist"
      
      - name: Verify SARIF Structure
        run: |
          echo "Verifying SARIF structure..."
          
          # Check SARIF is valid JSON
          if ! jq empty test-repo/.agent-os/reviews/results.sarif 2>/dev/null; then
            echo "❌ SARIF is not valid JSON"
            exit 1
          fi
          
          # Check SARIF has required fields
          if ! jq -e '.version' test-repo/.agent-os/reviews/results.sarif > /dev/null; then
            echo "❌ SARIF missing version field"
            exit 1
          fi
          
          if ! jq -e '.runs[0].tool.driver.name' test-repo/.agent-os/reviews/results.sarif > /dev/null; then
            echo "❌ SARIF missing tool name"
            exit 1
          fi
          
          echo "✅ SARIF structure valid"
      
      - name: Verify Findings
        run: |
          echo "Verifying findings were detected..."
          
          # Check that some issues were found (our test file has intentional issues)
          BLOCKERS="${{ steps.review.outputs.blockers-found }}"
          SUGGESTIONS="${{ steps.review.outputs.suggestions-found }}"
          
          if [ "$BLOCKERS" == "0" ] && [ "$SUGGESTIONS" == "0" ]; then
            echo "⚠️  Warning: No issues found in intentionally vulnerable code"
            echo "This may indicate the AI analysis didn't run properly"
            # Don't fail - could be API issue
          else
            echo "✅ Found $BLOCKERS blockers and $SUGGESTIONS suggestions"
          fi
      
      - name: Test Fail-On Logic
        if: matrix.mode == 'single'  # Only test once
        run: |
          echo "Testing fail-on logic..."
          
          # Test that fail-on works (should fail with security:critical)
          set +e
          ./action.yml \
            anthropic-api-key="${{ secrets.ANTHROPIC_API_KEY }}" \
            project-path="./test-repo" \
            fail-on="security:critical" \
            > /dev/null 2>&1
          EXIT_CODE=$?
          set -e
          
          if [ $EXIT_CODE -eq 0 ]; then
            echo "✅ Fail-on logic working (or no critical issues found)"
          else
            echo "✅ Fail-on logic triggered as expected"
          fi
      
      - name: Upload Smoke Test Artifacts
        if: always()
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874  # v4.4.0
        with:
          name: smoke-test-reports-${{ matrix.mode }}-${{ matrix.provider }}
          path: test-repo/.agent-os/reviews/
          retention-days: 7
  
  smoke-test-summary:
    name: Smoke Test Summary
    needs: smoke-test
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Check Results
        run: |
          if [ "${{ needs.smoke-test.result }}" == "success" ]; then
            echo "✅ All smoke tests passed"
          else
            echo "❌ Some smoke tests failed"
            exit 1
          fi

